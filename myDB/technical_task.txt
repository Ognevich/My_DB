Крок 1. Планування

	Визначте мету програми:

	Що саме ваша БД повинна робити.

	Наприклад: створювати таблиці, вставляти рядки, виконувати SELECT.

	Визначте структуру таблиць:

	Подумайте, які типи даних підтримуватимуться:

	INT – цілі числа

	FLOAT – числа з плаваючою комою

	CHAR(n) – рядки фіксованої довжини

	Визначте максимальну довжину рядків CHAR для кожного поля.

	Виберіть формат зберігання:

	Бінарні файли: швидкі, економлять місце, але складніше редагувати вручну.

	Текстові файли: легко читати і редагувати, але обмежена швидкість при великих об’ємах.

	Визначте інтерфейс користувача:

	В консолі можна робити меню: CREATE TABLE, INSERT, SELECT.

	Подумайте, як користувач буде вводити команди: через SQL-подібні рядки або через просте меню.

Крок 2. Метадані

	Що таке метадані:

	Це інформація про таблицю: назва таблиці, назви колонок, типи колонок, довжини CHAR-полів.

	Зберігання метаданих:

	Для кожної таблиці створюйте окремий файл, наприклад students.meta.

	У ньому описуйте всі колонки, їхній тип і довжину.

	Метадані потрібні для того, щоб програма знала, як інтерпретувати дані під час читання файлу таблиці.

	Формат метаданих:

	Можна текстовий: кожен рядок – назва колонки, тип, довжина.

	Або бінарний для швидшого завантаження, якщо БД велика.

Крок 3. Структура даних у пам’яті

	Таблиця:

	В пам’яті зберігає назву, список колонок і кількість колонок.

	Колонки:

	Кожна колонка має ім’я, тип і довжину (для CHAR).

	Рядки:

	Кожен рядок містить масив полів (Field).

	Кожне поле відповідає колонці таблиці і зберігає значення у відповідному типі.

	Пам’ять для рядків:

	Можна виділяти динамічно масив полів для кожного рядка.

	Після вставки всі рядки можна записувати у файл.

Крок 4. Створення таблиці

	Прийом від користувача:

	Назва таблиці

	Кількість колонок

	Для кожної колонки: назва, тип, довжина для CHAR

	Створення метафайлу:

	Записати інформацію про всі колонки у файл.

	Цей файл буде використовуватися для читання даних таблиці.

	Перевірки:

	Переконатися, що таблиця з такою назвою ще не існує.

	Перевірити правильність типів і довжин.

	Результат:

	На цьому етапі таблиця існує лише як структура метаданих, без даних.

Крок 5. Вставка рядків

	Прийом даних від користувача:

	Користувач вводить значення для кожної колонки.

	Перевіряйте типи даних: числа для INT/FLOAT, рядки для CHAR.

	Створення рядка в пам’яті:

	Виділяєте пам’ять для полів рядка.

	Зберігаєте значення у відповідному полі.

	Запис у файл даних таблиці:

	Відкриваєте файл таблиці (наприклад, students.data) у режимі додавання.

	Записуєте бінарно або у текстовому форматі.

	Рекомендації:

	Спершу можна накопичувати рядки в пам’яті, потім разово записувати у файл.

	Це дозволяє швидше виконувати INSERT, особливо при великих об’ємах.

Крок 6. SELECT-запити

	Читання всіх рядків:

	Відкриваєте файл даних таблиці.

	Читаєте всі рядки у пам’ять, використовуючи інформацію з метафайлу.

	Вивід у консоль:

	Виводите назви колонок як заголовок.

	Потім виводите всі рядки у табличному вигляді.

	Обмеження на початку:

	Підтримуйте лише SELECT * FROM table без WHERE, ORDER BY або JOIN.

Крок 7. Подальше розширення

	Додавання WHERE:

	Фільтрація рядків у пам’яті за умовою (наприклад, age > 18).

	UPDATE і DELETE:

	Читання файлу у пам’ять, зміна рядків або видалення, перезапис файлу.

	Сортування SELECT:

	Використовувати алгоритми сортування для масиву рядків у пам’яті.

	Оптимізація:

	Додавання індексів для швидшого пошуку.

	Поділ на сторінки для великих таблиць.